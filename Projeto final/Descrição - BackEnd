Criamos um Servidor que recebe uma requisição do tipo POST, contendo um texto no corpo da requisição. 
O servidor deverá entregar o texto ao chatbot, gerar uma resposta e enviar o texto resultante ao cliente.

Do lado do cliente, o usuário irá digitar um texto e clicar em um botão de envio. O texto devera ser enviado ao servidor no corpo (body) da requisição. 
A resposta do servidor será um texto, que deverá ser exibido na tela.

Servimos a página web (front) de forma estática no próprio servidor, dentro do diretório public, de modo que o usuário faça o acesso via localhost.

Rode 'node server.js' neste diretório para iniciar o servidor na porta 3000, e você poderá acessar a aplicação no navegador em http://localhost:3000.

# Descrição da estrutura:
server.js:
    Este é o ponto de entrada principal da aplicação.
    Ele importa os módulos necessários e configura o servidor.
    Usamos o middleware express.static para servir arquivos estáticos (páginas web, scripts, etc.) do diretório public.
    
routes Directory:
    Este diretório contém os arquivos responsáveis pelas rotas da aplicação.
    No exemplo, há um arquivo index.js que agrega todas as rotas definidas nos outros módulos dentro do diretório.
    Podemos adicionar mais arquivos aqui para organizar rotas específicas.

queryController.js:
    Este módulo contém a lógica específica para a rota /query.
    É exportada uma função handleUserQuery que é o handler para essa rota. Ela processa a requisição, chama a função getChatbotResponse e envia a resposta para o cliente.
    A função getChatbotResponse é uma função auxiliar que encapsula a lógica de interação com o chatbot. 
    
routes/index.js:
    Este arquivo agrega todas as rotas definidas em outros módulos e exporta o roteador completo.
    Isso permite adicionar ou remover rotas sem precisar alterar diretamente o arquivo server.js.