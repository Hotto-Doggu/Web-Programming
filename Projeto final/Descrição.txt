# Projeto UFOP Chatbot

## Descrição
O projeto UFOP Chatbot é um sistema de chat interativo que permite aos usuários da UFOP (Universidade Federal de Ouro Preto) fazerem consultas sobre questões acadêmicas, como regimentos, calendários e outras informações relacionadas à universidade. O chatbot fornece respostas automáticas com base nas consultas dos usuários.

## Funcionamento
O sistema consiste em um frontend onde os usuários podem inserir suas consultas e receber respostas do chatbot, e um backend que gerencia as requisições dos usuários, interage com o chatbot e fornece as respostas.

### Backend
O backend é construído com Node.js e utiliza o framework Express para gerenciar as rotas da aplicação. Ele inclui um servidor que recebe consultas dos usuários via requisições POST. A lógica do chatbot é encapsulada no arquivo `queryController.js`, onde a função `handleUserQuery` processa as consultas e interage com o chatbot para gerar respostas. O servidor também utiliza sessões para manter o estado do usuário.

### Frontend
O frontend é composto por uma página HTML (`index.html`), um arquivo de estilo CSS (`tp.css`) e um script JavaScript (`tp.js`). A interface do usuário permite que os usuários insiram suas consultas, enviem para o servidor e exibam as respostas do chatbot. O frontend utiliza a biblioteca Fetch API para se comunicar com o backend.

## Inicialização do Ambiente
1. Certifique-se de ter o MongoDB instalado e iniciado.
    1a. Instancie o servidor do banco de dados com `mongod` 
    1b. Instancie o cliente do banco de dados com `mongo`, seguido de `use chatbot` dentro do shell
2. Execute `npm install` para instalar as dependências.
3. Execute `node server.js` para iniciar o servidor.
4. Acesse a aplicação em http://localhost:3000.

## Estrutura do Projeto
- `public`: Contém arquivos estáticos do lado do cliente, como HTML, CSS e scripts do navegador.
- `server.js`: Ponto de entrada do servidor Node.js, gerencia rotas, interação com MongoDB e lógica de autenticação.
- `authRoutes`: Contém controladores e rotas relacionadas à autenticação do usuário.
- `routes`: Contém arquivos de controle e rotas para a aplicação.
- `__tests__`: Contém testes automatizados para os controladores.
- `jest.config.js`: Configuração do Jest para testes.
- `package.json`: Arquivo de configuração do Node.js com as dependências necessárias.
